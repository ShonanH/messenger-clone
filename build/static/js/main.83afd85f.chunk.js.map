{"version":3,"sources":["Message.js","firebase.js","App.js","reportWebVitals.js","index.js"],"names":["Message","forwardRef","ref","message","isUser","username","className","Card","CardContent","Typography","color","variant","component","db","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","App","useState","input","setInput","messages","setMessages","setUsername","useEffect","prompt","collection","orderBy","onSnapshot","snapshot","docs","map","doc","id","data","FormControl","Input","placeholder","value","onChange","event","target","IconButton","disabled","type","onClick","preventDefault","add","timestamp","FieldValue","serverTimestamp","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8SAoBeA,EAhBCC,sBAAW,WAAwBC,GAAS,IAA9BC,EAA6B,EAA7BA,QACtBC,EADmD,EAApBC,WACTF,EAAQE,SACpC,OACE,qBAAKH,IAAKA,EAAKI,UAAS,kBAAaF,GAAU,iBAA/C,SACE,cAACG,EAAA,EAAD,CAAMD,UAAWF,EAAS,oBAAsB,oBAAhD,SACE,cAACI,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,CAAYC,MAAM,QAAQC,QAAQ,KAAKC,UAAU,KAAjD,WACIR,GAAD,UAAcD,EAAQE,UAAY,eAAlC,MAAsD,IACtDF,EAAQA,oB,QCGNU,EAbKC,IAASC,cAAc,CAEzCC,OAAQ,0CACRC,WAAY,wCACZC,UAAW,wBACXC,cAAe,oCACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAGMC,Y,iCCiERC,MApEf,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNC,EADM,KACCC,EADD,OAEmBF,mBAAS,IAF5B,mBAENG,EAFM,KAEIC,EAFJ,OAGmBJ,mBAAS,IAH5B,mBAGNpB,EAHM,KAGIyB,EAHJ,KAkCb,OA1BAC,qBAAU,WAGRD,EAAYE,OAAO,6BAClB,IAEHD,qBAAU,WACRlB,EAAGoB,WAAW,YACXC,QAAQ,YAAa,QACrBC,YAAW,SAACC,GACXP,EACEO,EAASC,KAAKC,KAAI,SAACC,GAAD,MAAU,CAAEC,GAAID,EAAIC,GAAIrC,QAASoC,EAAIE,iBAG5D,IAaD,sBAAKnC,UAAU,MAAf,UACE,gDACA,0CAAaD,KACb,sBAAMC,UAAU,YAAhB,SACE,eAACoC,EAAA,EAAD,CAAapC,UAAU,mBAAvB,UACE,cAACqC,EAAA,EAAD,CACErC,UAAU,aACVsC,YAAY,qBACZC,MAAOnB,EACPoB,SAAU,SAACC,GAAD,OAAWpB,EAASoB,EAAMC,OAAOH,UAG7C,cAACI,EAAA,EAAD,CACE3C,UAAU,kBACV4C,UAAWxB,EACXf,QAAQ,YACRD,MAAM,UACNyC,KAAK,SACLC,QA7BU,SAACL,GAEnBA,EAAMM,iBACNxC,EAAGoB,WAAW,YAAYqB,IAAI,CAC5BnD,QAASuB,EACTrB,SAAUA,EACVkD,UAAWzC,IAASS,UAAUiC,WAAWC,oBAE3C9B,EAAS,KAeH,SAQE,cAAC,IAAD,WAIN,cAAC,IAAD,UACGC,EAASU,KAAI,gBAAGE,EAAH,EAAGA,GAAIrC,EAAP,EAAOA,QAAP,OACZ,cAAC,EAAD,CAAkBE,SAAUA,EAAUF,QAASA,GAAjCqC,YC3DTkB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.83afd85f.chunk.js","sourcesContent":["import { Card, CardContent, Typography } from \"@material-ui/core\";\nimport React, { forwardRef } from \"react\";\nimport \"./Message.css\";\n\nconst Message = forwardRef(({ message, username }, ref) => {\n  const isUser = username === message.username;\n  return (\n    <div ref={ref} className={`message ${isUser && \"message__user\"}`}>\n      <Card className={isUser ? \"message__userCard\" : \"message_guestCard\"}>\n        <CardContent>\n          <Typography color=\"white\" variant=\"h5\" component=\"h2\">\n            {!isUser && `${message.username || \"Unknown User\"}: `}{\" \"}\n            {message.message}\n          </Typography>\n        </CardContent>\n      </Card>\n    </div>\n  );\n});\n\nexport default Message;\n","import firebase from \"firebase\";\n\nconst firebaseApp = firebase.initializeApp({\n  // For Firebase JS SDK v7.20.0 and later, measurementId is optional\n  apiKey: \"AIzaSyBHBOA78hZGsVwrLfwYgxsg9O-9TZRPPqs\",\n  authDomain: \"messenger-clone-c2d9e.firebaseapp.com\",\n  projectId: \"messenger-clone-c2d9e\",\n  storageBucket: \"messenger-clone-c2d9e.appspot.com\",\n  messagingSenderId: \"556755713335\",\n  appId: \"1:556755713335:web:c15366091162d942b3eeb2\",\n  measurementId: \"G-S1FESS6S2Q\",\n});\n\nconst db = firebaseApp.firestore();\n\nexport default db;\n","import React, { useState, useEffect } from \"react\";\nimport { Button, FormControl, Input, InputLabel } from \"@material-ui/core\";\nimport \"./App.css\";\nimport Message from \"./Message\";\nimport db from \"./firebase\";\nimport firebase from \"firebase\";\nimport FlipMove from \"react-flip-move\";\nimport SendIcon from \"@material-ui/icons/Send\";\nimport { IconButton } from \"@material-ui/core\";\n\nfunction App() {\n  const [input, setInput] = useState(\"\");\n  const [messages, setMessages] = useState([]);\n  const [username, setUsername] = useState(\"\");\n\n  // useState = variable in React\n  // useEffect = run code on a condition in React\n\n  useEffect(() => {\n    //run code here\n    //if condition is blank, then the code runs ONCE when the app component (page) loads\n    setUsername(prompt(\"Please enter your name\"));\n  }, []); //condition\n\n  useEffect(() => {\n    db.collection(\"messages\")\n      .orderBy(\"timestamp\", \"desc\")\n      .onSnapshot((snapshot) => {\n        setMessages(\n          snapshot.docs.map((doc) => ({ id: doc.id, message: doc.data() }))\n        );\n      });\n  }, []);\n\n  const sendMessage = (event) => {\n    //all the logic of sending the message goes here\n    event.preventDefault();\n    db.collection(\"messages\").add({\n      message: input,\n      username: username,\n      timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n    });\n    setInput(\"\");\n  };\n  return (\n    <div className=\"App\">\n      <h1>Hello world!!!</h1>\n      <h2>Welcome {username}</h2>\n      <form className=\"app__form\">\n        <FormControl className=\"app__formControl\">\n          <Input\n            className=\"app__input\"\n            placeholder=\"Enter a message...\"\n            value={input}\n            onChange={(event) => setInput(event.target.value)}\n          />\n\n          <IconButton\n            className=\"app__iconButton\"\n            disabled={!input}\n            variant=\"contained\"\n            color=\"primary\"\n            type=\"submit\"\n            onClick={sendMessage}\n          >\n            <SendIcon />\n          </IconButton>\n        </FormControl>\n      </form>\n      <FlipMove>\n        {messages.map(({ id, message }) => (\n          <Message key={id} username={username} message={message} />\n        ))}\n      </FlipMove>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}